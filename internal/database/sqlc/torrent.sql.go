// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: torrent.sql

package database

import (
	"context"
	"database/sql"
)

const createFile = `-- name: CreateFile :exec
INSERT INTO Files (
    ID,
    Name,
    Folder_ID,
    Size,
    Mimetype,
    MD5,
    Server
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateFileParams struct {
	ID       string
	Name     string
	FolderID string
	Size     int64
	Mimetype string
	Md5      string
	Server   string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) error {
	_, err := q.db.ExecContext(ctx, createFile,
		arg.ID,
		arg.Name,
		arg.FolderID,
		arg.Size,
		arg.Mimetype,
		arg.Md5,
		arg.Server,
	)
	return err
}

const createFolder = `-- name: CreateFolder :exec
INSERT INTO Folders (
    ID,
    Name,
    Hash,
    Size,
    Parent_Folder_ID
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateFolderParams struct {
	ID             string
	Name           string
	Hash           sql.NullString
	Size           int64
	ParentFolderID string
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) error {
	_, err := q.db.ExecContext(ctx, createFolder,
		arg.ID,
		arg.Name,
		arg.Hash,
		arg.Size,
		arg.ParentFolderID,
	)
	return err
}

const folderExists = `-- name: FolderExists :one
SELECT COUNT(*) > 0 FROM Folders WHERE ID = ?
`

func (q *Queries) FolderExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, folderExists, id)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const getFilesByFolderID = `-- name: GetFilesByFolderID :many
SELECT id, name, folder_id, size, mimetype, md5, server, date_added FROM Files
WHERE Folder_ID = ?
`

func (q *Queries) GetFilesByFolderID(ctx context.Context, folderID string) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesByFolderID, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.FolderID,
			&i.Size,
			&i.Mimetype,
			&i.Md5,
			&i.Server,
			&i.DateAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFolderByID = `-- name: GetFolderByID :one
SELECT id, name, hash, size, parent_folder_id, date_added FROM Folders
WHERE ID = ?
`

func (q *Queries) GetFolderByID(ctx context.Context, id string) (Folder, error) {
	row := q.db.QueryRowContext(ctx, getFolderByID, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Hash,
		&i.Size,
		&i.ParentFolderID,
		&i.DateAdded,
	)
	return i, err
}

const getFolderContents = `-- name: GetFolderContents :many
WITH RECURSIVE folder_contents AS (
    SELECT 'folder' AS type, 
           ID, 
           Name, 
           Size, 
           DATE_FORMAT(Date_Added, '%Y-%m-%d %H:%i:%s') as Date_Added,
           '' as Server
    FROM Folders 
    WHERE Parent_Folder_ID = ?
    AND ID != '00000000-0000-0000-0000-000000000000'
    UNION ALL
    SELECT 'file' AS type,
           ID,
           Name,
           Size,
           DATE_FORMAT(Date_Added, '%Y-%m-%d %H:%i:%s') as Date_Added,
           Server
    FROM Files 
    WHERE Folder_ID = ?
)
SELECT type, ID, Name, Size, Date_Added, Server 
FROM folder_contents
ORDER BY Date_Added DESC
`

type GetFolderContentsParams struct {
	ParentFolderID string
	FolderID       string
}

type GetFolderContentsRow struct {
	Type      string
	ID        string
	Name      string
	Size      int64
	DateAdded string
	Server    string
}

func (q *Queries) GetFolderContents(ctx context.Context, arg GetFolderContentsParams) ([]GetFolderContentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFolderContents, arg.ParentFolderID, arg.FolderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFolderContentsRow
	for rows.Next() {
		var i GetFolderContentsRow
		if err := rows.Scan(
			&i.Type,
			&i.ID,
			&i.Name,
			&i.Size,
			&i.DateAdded,
			&i.Server,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
