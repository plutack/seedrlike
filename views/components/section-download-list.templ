package components

import "fmt"
import database "github.com/plutack/seedrlike/internal/database/sqlc"

func formatSize(size int64) string {
	sizeInMB := float64(size) / 1000000
	return fmt.Sprintf("%.2f", sizeInMB)
}

func returnFileDownloadUrl(server string, contentID string, name string) string {
	return fmt.Sprintf("https://%s.gofile.io/download/web/%s/%s", server, contentID, name)
}

func returnFolderDownloadUrl(contentID string) string {
	return fmt.Sprintf("https://gofile.io/d/%s", contentID)
}

func returnContentDeleteUrl(contentID, contentType string) string {
	return fmt.Sprintf("/contents/%s?type=%s", contentID, contentType)
}

templ DownloadList(returnErr bool, torrents []database.GetFolderContentsRow, folderID string) {
	<div id="content-list">
		<div class="w-full max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl sm:text-3xl font-bold">Available Downloads</h1>
				<input
					type="button"
					class="btn btn-sm sm:btn-md"
					hx-delete="/contents"
					hx-target="#content-list"
					hx-swap="outerHTML"
					value="Delete stale content"
				/>
			</div>
			if returnErr {
				<div class="flex justify-center items-center p-8">
					<p class="text-error text-lg">Cannot fetch item</p>
				</div>
			} else {
				<div class="bg-base-200 rounded-lg shadow-lg" id="folder-list">
					<div class="hidden sm:grid sm:grid-cols-[auto,1fr,auto,auto] gap-4 p-4 text-base font-semibold items-center border-b border-base-300">
						<span class="w-6"></span>
						<span>Name</span>
						<span class="text-right pr-4">Size (MB)</span>
						<span class="text-center">Action</span>
					</div>
					<div class="divide-y divide-base-300">
						for _, torrent := range torrents {
							<div class="grid grid-cols-1 sm:grid-cols-[auto,1fr,auto,auto] gap-2 sm:gap-4 p-4 items-center">
								<!-- Mobile Layout -->
								<div class="sm:hidden flex items-center gap-3">
									if torrent.Type == "folder" {
										<img src="/assets/images/folder-close.svg" alt="folder" class="w-5 h-5"/>
									} else {
										<img src="/assets/images/file.svg" alt="file" class="w-5 h-5"/>
									}
									<a
										href={ templ.SafeURL("/contents/" + torrent.ID) }
										hx-get={ "/contents/" + torrent.ID }
										hx-target="#content-list"
										hx-swap="outerHTML"
										hx-push-url="true"
										class="flex-1 truncate hover:text-primary"
									>
										{ torrent.Name }
									</a>
									<span class="text-sm text-base-content/70">{ formatSize(torrent.Size) } MB</span>
								</div>
								<div class="hidden sm:block">
									if torrent.Type == "folder" {
										<img src="/assets/images/folder-close.svg" alt="folder" class="w-6 h-6"/>
									} else {
										<img src="/assets/images/file.svg" alt="file" class="w-6 h-6"/>
									}
								</div>
								<a
									href={ templ.SafeURL("/contents/" + torrent.ID) }
									hx-get={ "/contents/" + torrent.ID }
									hx-target="#content-list"
									hx-swap="outerHTML"
									hx-push-url="true"
									class="hidden sm:block truncate hover:text-primary"
								>
									{ torrent.Name }
								</a>
								<span class="hidden sm:block text-right pr-4">{ formatSize(torrent.Size) }</span>
								<div class="dropdown dropdown-end w-full sm:w-auto">
									<div
										tabindex="0"
										role="button"
										class="btn btn-primary w-full sm:w-auto"
									>
										Actions
									</div>
									<ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
										<li>
											<a
												if torrent.Type == "folder" {
													href={ templ.SafeURL(returnFolderDownloadUrl(torrent.ID)) }
												} else {
													href={ templ.SafeURL(returnFileDownloadUrl(torrent.Server, torrent.ID, torrent.Name)) }
												}
												target="_blank"
												class="flex items-center gap-2"
											>
												<span>Download</span>
											</a>
										</li>
										<li>
											<a
												hx-delete={ returnContentDeleteUrl(torrent.ID, torrent.Type) }
												hx-target="#content-list"
												hx-swap="outerHTML"
												hx-on::htmx:afterRequest="htmx.trigger('#content-list', 'refresh')"
												class="flex items-center gap-2"
											>
												<span>Delete</span>
											</a>
										</li>
									</ul>
								</div>
							</div>
						}
					</div>
				</div>
			}
		</div>
	</div>
}
